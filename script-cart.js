// Config Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7986532916:AAGPbxtqJHILVuHBYb0fwsKU62a4jEJ8Jp8";
const TELEGRAM_CHAT_ID = "7774024453";

const SHIPPING_FEE = 20000;
const FREE_SHIP_MIN = 200000;

// DOM
const cartContainer = document.getElementById("cart-container");
const btnBack = document.getElementById("btn-back");
const btnCheckout = document.getElementById("btn-checkout");
const shippingFeeEl = document.getElementById("shipping-fee");
const checkoutModal = document.getElementById("checkout-modal");
const orderForm = document.getElementById("order-form");
const btnCancel = document.getElementById("btn-cancel");

// --- Load gi·ªè h√†ng t·ª´ localStorage ---
let cart = {};
function loadCart() {
  const data = localStorage.getItem("cart");
  cart = data ? JSON.parse(data) : {};
}

// --- L∆∞u gi·ªè h√†ng ---
function saveCart() {
  localStorage.setItem("cart", JSON.stringify(cart));
}

// --- T√¨m s·∫£n ph·∫©m theo id ---
function findProductById(id) {
  // C·∫ßn copy productsData t·ª´ script.js ho·∫∑c t·∫°o 1 file js d√πng chung.
  // ƒê·ªÉ demo t·∫°m d√πng fetch t·ª´ localStorage ho·∫∑c m·ªôt api gi·∫£ ƒë·ªãnh.
  // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ copy l·∫°i productsData t·ª´ script.js.
  if (!window.productsData) return null;
  for (const catKey in window.productsData) {
    for (const subKey in window.productsData[catKey]) {
      const prod = window.productsData[catKey][subKey].find((p) => p.id === id);
      if (prod) return prod;
    }
  }
  return null;
}

// --- Format ti·ªÅn ---
function formatCurrency(num) {
  return num.toLocaleString("vi-VN") + " ƒë";
}

// --- T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng ---
function calculateTotal() {
  let total = 0;
  for (const id in cart) {
    const prod = findProductById(id);
    if (prod) {
      total += prod.price * cart[id];
    }
  }
  return total;
}

// --- Hi·ªÉn th·ªã gi·ªè h√†ng ---
function renderCart() {
  if (!cart || Object.keys(cart).length === 0) {
    cartContainer.innerHTML = "<p>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>";
    shippingFeeEl.textContent = "0 ƒë";
    btnCheckout.disabled = true;
    return;
  }
  btnCheckout.disabled = false;

  let html = `<table class="cart-table">
    <thead>
      <tr>
        <th>T√™n s·∫£n ph·∫©m</th>
        <th>S·ªë l∆∞·ª£ng</th>
        <th>Gi√°</th>
        <th>Th√†nh ti·ªÅn</th>
        <th>X√≥a</th>
      </tr>
    </thead>
    <tbody>`;

  for (const id in cart) {
    const prod = findProductById(id);
    if (!prod) continue;
    const qty = cart[id];
    const lineTotal = prod.price * qty;
    html += `
      <tr data-id="${id}">
        <td>${prod.name}</td>
        <td><input type="number" min="1" value="${qty}" class="qty-input" /></td>
        <td>${formatCurrency(prod.price)}</td>
        <td>${formatCurrency(lineTotal)}</td>
        <td><button class="btn-remove">X√≥a</button></td>
      </tr>
    `;
  }

  html += `</tbody></table>`;

  const total = calculateTotal();
  const shipFee = total >= FREE_SHIP_MIN ? 0 : SHIPPING_FEE;
  shippingFeeEl.textContent = formatCurrency(shipFee);

  html += `
    <div class="cart-summary">
      <strong>T·ªïng c·ªông:</strong> ${formatCurrency(total + shipFee)}
    </div>
  `;

  cartContainer.innerHTML = html;

  // G√°n s·ª± ki·ªán update s·ªë l∆∞·ª£ng
  cartContainer.querySelectorAll(".qty-input").forEach((input) => {
    input.addEventListener("change", (e) => {
      const tr = e.target.closest("tr");
      const id = tr.dataset.id;
      let val = parseInt(e.target.value);
      if (isNaN(val) || val < 1) val = 1;
      cart[id] = val;
      saveCart();
      renderCart();
    });
  });

  // X√≥a s·∫£n ph·∫©m
  cartContainer.querySelectorAll(".btn-remove").forEach((btn) => {
    btn.addEventListener("click", (e) => {
      const tr = e.target.closest("tr");
      const id = tr.dataset.id;
      delete cart[id];
      saveCart();
      renderCart();
    });
  });
}

// --- X·ª≠ l√Ω n√∫t tr·ªü v·ªÅ ---
btnBack.addEventListener("click", () => {
  window.location.href = "index.html";
});

// --- M·ªü modal ƒë·∫∑t h√†ng ---
btnCheckout.addEventListener("click", () => {
  checkoutModal.classList.remove("hidden");
});

// --- ƒê√≥ng modal ---
btnCancel.addEventListener("click", () => {
  checkoutModal.classList.add("hidden");
});

// --- G·ª≠i ƒë∆°n h√†ng l√™n Telegram Bot ---
async function sendOrderToTelegram(orderData) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const text = buildOrderMessage(orderData);

  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text,
    parse_mode: "HTML",
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error("Error sending message to Telegram:", error);
    return false;
  }
}

// --- T·∫°o m√£ ƒë∆°n h√†ng ---
function generateOrderCode() {
  const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let code = "";
  for (let i = 0; i < 3; i++) {
    code += letters.charAt(Math.floor(Math.random() * letters.length));
  }
  const numbers = Math.floor(Math.random() * 1e7)
    .toString()
    .padStart(7, "0");
  return code + numbers;
}

// --- X√¢y d·ª±ng n·ªôi dung tin nh·∫Øn ---
function buildOrderMessage({ name, phone, address, products, shipFee, total }) {
  const orderCode = generateOrderCode();
  const now = new Date();
  const timeStr = now.toLocaleTimeString("vi-VN");
  const dateStr = now.toLocaleDateString("vi-VN");

  let productLines = "";
  products.forEach(({ name, qty }) => {
    productLines += `- ${name} x ${qty}\n`;
  });

  return `<b>üì¶ ƒê∆†N H√ÄNG M·ªöI: ${orderCode}</b>
üïí Th·ªùi gian: ${timeStr} - ${dateStr}
üë§ T√™n: ${name}
üìû SƒêT: ${phone}
üè† ƒê·ªãa ch·ªâ: ${address}

üõí S·∫£n ph·∫©m:
${productLines}
üöö Ph√≠ ship: ${formatCurrency(shipFee)}
üí∞ T·ªïng c·ªông: ${formatCurrency(total)}
`;
}

// --- X·ª≠ l√Ω submit form ƒë·∫∑t h√†ng ---
orderForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const name = orderForm.customerName.value.trim();
  const phone = orderForm.customerPhone.value.trim();
  const address = orderForm.customerAddress.value.trim();

  if (!name || !phone || !address) {
    alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    return;
  }

  const products = [];
  for (const id in cart) {
    const prod = findProductById(id);
    if (prod) {
      products.push({ name: prod.name, qty: cart[id] });
    }
  }
  const totalProductPrice = calculateTotal();
  const shipFee = totalProductPrice >= FREE_SHIP_MIN ? 0 : SHIPPING_FEE;
  const total = totalProductPrice + shipFee;

  btnCheckout.disabled = true;
  btnCancel.disabled = true;

  const success = await sendOrderToTelegram({
    name,
    phone,
    address,
    products,
    shipFee,
    total,
  });

  if (success) {
    alert("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
    cart = {};
    saveCart();
    renderCart();
    checkoutModal.classList.add("hidden");
  } else {
    alert("ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
  }

  btnCheckout.disabled = false;
  btnCancel.disabled = false;
});

// --- Kh·ªüi t·∫°o ---
function init() {
  // ƒê·ªÉ d√πng chung productsData t·ª´ script.js b·∫°n c√≥ th·ªÉ load n√≥ ·ªü ƒë√¢y ho·∫∑c copy v√†o cart script.
  // D∆∞·ªõi ƒë√¢y l√† m·ªôt v√≠ d·ª• gi·∫£ ƒë·ªãnh ƒë√£ c√≥ productsData g√°n v√†o window.productsData:
  // window.productsData = { ... };

  loadCart();
  renderCart();
}

init();
