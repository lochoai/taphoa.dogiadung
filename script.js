// Kh·ªüi t·∫°o trang cart v√† order
document.addEventListener('DOMContentLoaded', () => {
  // Ki·ªÉm tra n·∫øu trang l√† index.html ho·∫∑c cart.html
  if (document.getElementById('products')) {
    renderProducts('all'); // Render s·∫£n ph·∫©m n·∫øu l√† trang index
  }

  if (document.getElementById('cart-list')) {
    renderCart(); // Hi·ªÉn th·ªã gi·ªè h√†ng n·∫øu l√† trang cart
    handleOrder(); // X·ª≠ l√Ω ƒë∆°n h√†ng
  }
});

// H√†m hi·ªÉn th·ªã gi·ªè h√†ng
function renderCart() {
  const cartList = document.getElementById('cart-list');
  const totalPriceEl = document.getElementById('total-price');
  if (!cartList || !totalPriceEl) return;

  let cart = JSON.parse(localStorage.getItem('cart')) || [];
  cartList.innerHTML = ''; // X√≥a n·ªôi dung gi·ªè h√†ng tr∆∞·ªõc khi render

  if (cart.length === 0) {
    cartList.innerHTML = '<li>Gi·ªè h√†ng tr·ªëng.</li>';
    totalPriceEl.textContent = 'T·ªïng ti·ªÅn: 0 VND';
    return;
  }

  let total = 0;
  
  // Duy·ªát qua c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng v√† hi·ªÉn th·ªã ch√∫ng
  cart.forEach((item, index) => {
    // T√¨m s·∫£n ph·∫©m t·ª´ m·∫£ng products
    const product = products.find(p => p.id === item.id);
    
    if (!product) {
      console.error(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi id ${item.id}`);
      return;
    }

    total += product.price * item.quantity;

    const li = document.createElement('li');
    li.innerHTML = `
      ${product.name} - ${formatPrice(product.price)} x ${item.quantity}
      <button data-index="${index}">X√≥a</button>
    `;
    cartList.appendChild(li);
  });

  totalPriceEl.textContent = 'T·ªïng ti·ªÅn: ' + formatPrice(total);

  // X·ª≠ l√Ω s·ª± ki·ªán x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
  cartList.querySelectorAll('button').forEach(btn => {
    btn.addEventListener('click', () => {
      const idx = Number(btn.getAttribute('data-index'));
      cart.splice(idx, 1); // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
      localStorage.setItem('cart', JSON.stringify(cart));
      renderCart(); // Render l·∫°i gi·ªè h√†ng sau khi x√≥a
    });
  });
}

// H√†m x·ª≠ l√Ω ƒë·∫∑t h√†ng
function handleOrder() {
  const orderForm = document.getElementById('order-form');
  const orderMessage = document.getElementById('order-message');
  const orderSummary = document.getElementById('order-summary');
  
  if (!orderForm) return;

  orderForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Ki·ªÉm tra gi·ªè h√†ng kh√¥ng r·ªóng
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    if (cart.length === 0) {
      orderMessage.style.color = 'red';
      orderMessage.textContent = 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng, vui l√≤ng th√™m s·∫£n ph·∫©m.';
      return;
    }

    // L·∫•y th√¥ng tin t·ª´ form
    const fullname = orderForm.fullname.value.trim();
    const address = orderForm.address.value.trim();
    const phone = orderForm.phone.value.trim();

    if (!fullname || !address || !phone) {
      orderMessage.style.color = 'red';
      orderMessage.textContent = 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·∫∑t h√†ng.';
      return;
    }

    // T√≠nh t·ªïng ti·ªÅn
    let total = cart.reduce((sum, item) => {
      const product = products.find(p => p.id === item.id);
      return sum + (product ? product.price * item.quantity : 0);
    }, 0);

    // G·ª≠i ƒë∆°n h√†ng qua Telegram API
    const BOT_TOKEN = '7986532916:AAGPbxtqJHILVuHBYb0fwsKU62a4jEJ8Jp8';
    const CHAT_ID = '7774024453';

    let message = `üõí ƒê∆°n h√†ng m·ªõi t·ª´ c·ª≠a h√†ng L·ªòC HO√ÄI\n\n`;
    message += `Kh√°ch h√†ng:\nH·ªç t√™n: ${fullname}\nƒê·ªãa ch·ªâ: ${address}\nSƒêT: ${phone}\n\n`;
    message += `S·∫£n ph·∫©m:\n`;
    cart.forEach((item, i) => {
      const product = products.find(p => p.id === item.id);
      if (product) {
        message += `${i + 1}. ${product.name} - ${formatPrice(product.price)} x ${item.quantity}\n`;
      }
    });
    message += `\nT·ªïng ti·ªÅn: ${formatPrice(total)}`;

    // G·ª≠i request t·ªõi Telegram
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const params = { chat_id: CHAT_ID, text: message };

      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params)
      });

      const data = await res.json();
      if (data.ok) {
        orderMessage.style.color = 'green';
        orderMessage.textContent = 'ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n.';
        orderForm.reset();
        localStorage.removeItem('cart');
        renderCart();
        
        // Hi·ªÉn th·ªã t√≥m t·∫Øt ƒë∆°n h√†ng
        orderSummary.style.display = 'block';
        orderSummary.innerHTML = `
          <h3>Th√¥ng tin ƒë∆°n h√†ng c·ªßa b·∫°n:</h3>
          <p><strong>H·ªç t√™n:</strong> ${fullname}</p>
          <p><strong>ƒê·ªãa ch·ªâ:</strong> ${address}</p>
          <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${phone}</p>
          <p><strong>T·ªïng ti·ªÅn:</strong> ${formatPrice(total)}</p>
          <p><strong>S·∫£n ph·∫©m:</strong></p>
          <ul>${cart.map(item => {
            const product = products.find(p => p.id === item.id);
            return `<li>${product.name} - ${formatPrice(product.price)} x ${item.quantity}</li>`;
          }).join('')}</ul>
        `;
      } else {
        orderMessage.style.color = 'red';
        orderMessage.textContent = 'C√≥ l·ªói khi g·ª≠i ƒë∆°n h√†ng, vui l√≤ng th·ª≠ l·∫°i.';
      }
    } catch (err) {
      orderMessage.style.color = 'red';
      orderMessage.textContent = 'C√≥ l·ªói khi g·ª≠i ƒë∆°n h√†ng, vui l√≤ng th·ª≠ l·∫°i.';
      console.error(err);
    }
  });
}
